// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
#[derive(Clone)]
pub struct HtmlOutput {
  pub toc: Option<wit_bindgen::rt::string::String>,
  pub content: wit_bindgen::rt::string::String,
}
impl ::core::fmt::Debug for HtmlOutput {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("HtmlOutput").field("toc", &self.toc).field("content", &self.content).finish()
  }
}
/// The set of errors which may be raised by the function
#[derive(Clone)]
pub enum HighlighterError{
  Nolang,
  Nohighlighter,
  CouldNotBuildHighlighter(wit_bindgen::rt::string::String),
  StringGenerationError(wit_bindgen::rt::string::String),
}
impl ::core::fmt::Debug for HighlighterError {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    match self {
      HighlighterError::Nolang => {
        f.debug_tuple("HighlighterError::Nolang").finish()
      }
      HighlighterError::Nohighlighter => {
        f.debug_tuple("HighlighterError::Nohighlighter").finish()
      }
      HighlighterError::CouldNotBuildHighlighter(e) => {
        f.debug_tuple("HighlighterError::CouldNotBuildHighlighter").field(e).finish()
      }
      HighlighterError::StringGenerationError(e) => {
        f.debug_tuple("HighlighterError::StringGenerationError").field(e).finish()
      }
    }
  }
}
impl ::core::fmt::Display for HighlighterError {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    write!(f, "{:?}", self)
  }
}

impl std::error::Error for HighlighterError {}
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "process-markdown-to-html"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_process_markdown_to_html(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::process_markdown_to_html(wit_bindgen::rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    match result1 {
      Ok(e) => { {
        *((ptr2 + 0) as *mut u8) = (0i32) as u8;
        let HtmlOutput{ toc:toc3, content:content3, } = e;
        match toc3 {
          Some(e) => {
            *((ptr2 + 4) as *mut u8) = (1i32) as u8;
            let vec4 = (e.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr2 + 12) as *mut i32) = len4;
            *((ptr2 + 8) as *mut i32) = ptr4;
          },
          None => {
            {
              *((ptr2 + 4) as *mut u8) = (0i32) as u8;
            }
          },
        };let vec5 = (content3.into_bytes()).into_boxed_slice();
        let ptr5 = vec5.as_ptr() as i32;
        let len5 = vec5.len() as i32;
        ::core::mem::forget(vec5);
        *((ptr2 + 20) as *mut i32) = len5;
        *((ptr2 + 16) as *mut i32) = ptr5;
      } },
      Err(e) => { {
        *((ptr2 + 0) as *mut u8) = (1i32) as u8;
        match e {
          HighlighterError::Nolang=> {
            {
              *((ptr2 + 4) as *mut u8) = (0i32) as u8;
            }
          }
          HighlighterError::Nohighlighter=> {
            {
              *((ptr2 + 4) as *mut u8) = (1i32) as u8;
            }
          }
          HighlighterError::CouldNotBuildHighlighter(e) => {
            *((ptr2 + 4) as *mut u8) = (2i32) as u8;
            let vec6 = (e.into_bytes()).into_boxed_slice();
            let ptr6 = vec6.as_ptr() as i32;
            let len6 = vec6.len() as i32;
            ::core::mem::forget(vec6);
            *((ptr2 + 12) as *mut i32) = len6;
            *((ptr2 + 8) as *mut i32) = ptr6;
          },
          HighlighterError::StringGenerationError(e) => {
            *((ptr2 + 4) as *mut u8) = (3i32) as u8;
            let vec7 = (e.into_bytes()).into_boxed_slice();
            let ptr7 = vec7.as_ptr() as i32;
            let len7 = vec7.len() as i32;
            ::core::mem::forget(vec7);
            *((ptr2 + 12) as *mut i32) = len7;
            *((ptr2 + 8) as *mut i32) = ptr7;
          },
        }
      } },
    };ptr2
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_process-markdown-to-html"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_process_markdown_to_html(arg0: i32,) {
      let l0 = i32::from(*((arg0 + 0) as *const u8));
      match l0 {
        0 => {
          let l1 = i32::from(*((arg0 + 4) as *const u8));
          match l1 {
            0 => (),
            _ => {
              let l2 = *((arg0 + 8) as *const i32);
              let l3 = *((arg0 + 12) as *const i32);
              wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
            },
          }
          let l4 = *((arg0 + 16) as *const i32);
          let l5 = *((arg0 + 20) as *const i32);
          wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
        },
        _ => {
          let l6 = i32::from(*((arg0 + 4) as *const u8));
          match l6 {
            0 => (),
            1 => (),
            2 => {
              let l7 = *((arg0 + 8) as *const i32);
              let l8 = *((arg0 + 12) as *const i32);
              wit_bindgen::rt::dealloc(l7, (l8) as usize, 1);
            },
            _ => {
              let l9 = *((arg0 + 8) as *const i32);
              let l10 = *((arg0 + 12) as *const i32);
              wit_bindgen::rt::dealloc(l9, (l10) as usize, 1);
            },
          }
        },
      }
    }
  };
};
use super::Component as _GuestImpl;
pub trait Guest {
  fn process_markdown_to_html(input: wit_bindgen::rt::string::String,) -> Result<HtmlOutput,HighlighterError>;
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 24]);
static mut _RET_AREA: _RetArea = _RetArea([0; 24]);

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:femark"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 348] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 224, 1, 1, 65, 2, 1, 65, 8, 1, 107, 115, 1, 114, 2, 3, 116, 111, 99, 0, 7, 99, 111, 110, 116, 101, 110, 116, 115, 3, 0, 11, 104, 116, 109, 108, 45, 111, 117, 116, 112, 117, 116, 3, 0, 1, 1, 113, 4, 6, 110, 111, 108, 97, 110, 103, 0, 0, 13, 110, 111, 104, 105, 103, 104, 108, 105, 103, 104, 116, 101, 114, 0, 0, 27, 99, 111, 117, 108, 100, 45, 110, 111, 116, 45, 98, 117, 105, 108, 100, 45, 104, 105, 103, 104, 108, 105, 103, 104, 116, 101, 114, 1, 115, 0, 23, 115, 116, 114, 105, 110, 103, 45, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 45, 101, 114, 114, 111, 114, 1, 115, 0, 3, 0, 17, 104, 105, 103, 104, 108, 105, 103, 104, 116, 101, 114, 45, 101, 114, 114, 111, 114, 3, 0, 3, 1, 106, 1, 2, 1, 4, 1, 64, 1, 5, 105, 110, 112, 117, 116, 115, 0, 5, 4, 0, 24, 112, 114, 111, 99, 101, 115, 115, 45, 109, 97, 114, 107, 100, 111, 119, 110, 45, 116, 111, 45, 104, 116, 109, 108, 1, 6, 4, 1, 20, 98, 101, 110, 119, 105, 115, 58, 102, 101, 109, 97, 114, 107, 47, 102, 101, 109, 97, 114, 107, 4, 0, 11, 12, 1, 0, 6, 102, 101, 109, 97, 114, 107, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
