// Generated by `wit-bindgen` 0.18.0. DO NOT EDIT!
#[derive(Clone)]
pub struct OwnedCodeBlock {
  pub language: Option<wit_bindgen::rt::string::String>,
  pub source: wit_bindgen::rt::string::String,
}
impl ::core::fmt::Debug for OwnedCodeBlock {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("OwnedCodeBlock").field("language", &self.language).field("source", &self.source).finish()
  }
}
#[derive(Clone)]
pub struct OwnedFrontmatter {
  pub title: Option<wit_bindgen::rt::string::String>,
  pub code_block: Option<OwnedCodeBlock>,
}
impl ::core::fmt::Debug for OwnedFrontmatter {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("OwnedFrontmatter").field("title", &self.title).field("code-block", &self.code_block).finish()
  }
}
#[derive(Clone)]
pub struct HtmlOutput {
  pub toc: Option<wit_bindgen::rt::string::String>,
  pub content: wit_bindgen::rt::string::String,
  pub frontmatter: Option<OwnedFrontmatter>,
}
impl ::core::fmt::Debug for HtmlOutput {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    f.debug_struct("HtmlOutput").field("toc", &self.toc).field("content", &self.content).field("frontmatter", &self.frontmatter).finish()
  }
}
/// The set of errors which may be raised by the function
#[derive(Clone)]
pub enum HighlightError{
  Nolang,
  Nohighlighter,
  CouldNotBuildHighlighter(wit_bindgen::rt::string::String),
  StringGenerationError(wit_bindgen::rt::string::String),
}
impl ::core::fmt::Debug for HighlightError {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    match self {
      HighlightError::Nolang => {
        f.debug_tuple("HighlightError::Nolang").finish()
      }
      HighlightError::Nohighlighter => {
        f.debug_tuple("HighlightError::Nohighlighter").finish()
      }
      HighlightError::CouldNotBuildHighlighter(e) => {
        f.debug_tuple("HighlightError::CouldNotBuildHighlighter").field(e).finish()
      }
      HighlightError::StringGenerationError(e) => {
        f.debug_tuple("HighlightError::StringGenerationError").field(e).finish()
      }
    }
  }
}
impl ::core::fmt::Display for HighlightError {
  fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    write!(f, "{:?}", self)
  }
}

impl std::error::Error for HighlightError {}
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "process-markdown-to-html"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_process_markdown_to_html(arg0: i32,arg1: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let result1 = <_GuestImpl as Guest>::process_markdown_to_html(wit_bindgen::rt::string_lift(bytes0));
    let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
    match result1 {
      Ok(e) => { {
        *((ptr2 + 0) as *mut u8) = (0i32) as u8;
        let HtmlOutput{ toc:toc3, content:content3, frontmatter:frontmatter3, } = e;
        match toc3 {
          Some(e) => {
            *((ptr2 + 4) as *mut u8) = (1i32) as u8;
            let vec4 = (e.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr2 + 12) as *mut i32) = len4;
            *((ptr2 + 8) as *mut i32) = ptr4;
          },
          None => {
            {
              *((ptr2 + 4) as *mut u8) = (0i32) as u8;
            }
          },
        };let vec5 = (content3.into_bytes()).into_boxed_slice();
        let ptr5 = vec5.as_ptr() as i32;
        let len5 = vec5.len() as i32;
        ::core::mem::forget(vec5);
        *((ptr2 + 20) as *mut i32) = len5;
        *((ptr2 + 16) as *mut i32) = ptr5;
        match frontmatter3 {
          Some(e) => {
            *((ptr2 + 24) as *mut u8) = (1i32) as u8;
            let OwnedFrontmatter{ title:title6, code_block:code_block6, } = e;
            match title6 {
              Some(e) => {
                *((ptr2 + 28) as *mut u8) = (1i32) as u8;
                let vec7 = (e.into_bytes()).into_boxed_slice();
                let ptr7 = vec7.as_ptr() as i32;
                let len7 = vec7.len() as i32;
                ::core::mem::forget(vec7);
                *((ptr2 + 36) as *mut i32) = len7;
                *((ptr2 + 32) as *mut i32) = ptr7;
              },
              None => {
                {
                  *((ptr2 + 28) as *mut u8) = (0i32) as u8;
                }
              },
            };match code_block6 {
              Some(e) => {
                *((ptr2 + 40) as *mut u8) = (1i32) as u8;
                let OwnedCodeBlock{ language:language8, source:source8, } = e;
                match language8 {
                  Some(e) => {
                    *((ptr2 + 44) as *mut u8) = (1i32) as u8;
                    let vec9 = (e.into_bytes()).into_boxed_slice();
                    let ptr9 = vec9.as_ptr() as i32;
                    let len9 = vec9.len() as i32;
                    ::core::mem::forget(vec9);
                    *((ptr2 + 52) as *mut i32) = len9;
                    *((ptr2 + 48) as *mut i32) = ptr9;
                  },
                  None => {
                    {
                      *((ptr2 + 44) as *mut u8) = (0i32) as u8;
                    }
                  },
                };let vec10 = (source8.into_bytes()).into_boxed_slice();
                let ptr10 = vec10.as_ptr() as i32;
                let len10 = vec10.len() as i32;
                ::core::mem::forget(vec10);
                *((ptr2 + 60) as *mut i32) = len10;
                *((ptr2 + 56) as *mut i32) = ptr10;
              },
              None => {
                {
                  *((ptr2 + 40) as *mut u8) = (0i32) as u8;
                }
              },
            };},
            None => {
              {
                *((ptr2 + 24) as *mut u8) = (0i32) as u8;
              }
            },
          };} },
          Err(e) => { {
            *((ptr2 + 0) as *mut u8) = (1i32) as u8;
            match e {
              HighlightError::Nolang=> {
                {
                  *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                }
              }
              HighlightError::Nohighlighter=> {
                {
                  *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                }
              }
              HighlightError::CouldNotBuildHighlighter(e) => {
                *((ptr2 + 4) as *mut u8) = (2i32) as u8;
                let vec11 = (e.into_bytes()).into_boxed_slice();
                let ptr11 = vec11.as_ptr() as i32;
                let len11 = vec11.len() as i32;
                ::core::mem::forget(vec11);
                *((ptr2 + 12) as *mut i32) = len11;
                *((ptr2 + 8) as *mut i32) = ptr11;
              },
              HighlightError::StringGenerationError(e) => {
                *((ptr2 + 4) as *mut u8) = (3i32) as u8;
                let vec12 = (e.into_bytes()).into_boxed_slice();
                let ptr12 = vec12.as_ptr() as i32;
                let len12 = vec12.len() as i32;
                ::core::mem::forget(vec12);
                *((ptr2 + 12) as *mut i32) = len12;
                *((ptr2 + 8) as *mut i32) = ptr12;
              },
            }
          } },
        };ptr2
      }
      
      const _: () = {
        #[doc(hidden)]
        #[export_name = "cabi_post_process-markdown-to-html"]
        #[allow(non_snake_case)]
        unsafe extern "C" fn __post_return_process_markdown_to_html(arg0: i32,) {
          let l0 = i32::from(*((arg0 + 0) as *const u8));
          match l0 {
            0 => {
              let l1 = i32::from(*((arg0 + 4) as *const u8));
              match l1 {
                0 => (),
                _ => {
                  let l2 = *((arg0 + 8) as *const i32);
                  let l3 = *((arg0 + 12) as *const i32);
                  wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                },
              }
              let l4 = *((arg0 + 16) as *const i32);
              let l5 = *((arg0 + 20) as *const i32);
              wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
              let l6 = i32::from(*((arg0 + 24) as *const u8));
              match l6 {
                0 => (),
                _ => {
                  let l7 = i32::from(*((arg0 + 28) as *const u8));
                  match l7 {
                    0 => (),
                    _ => {
                      let l8 = *((arg0 + 32) as *const i32);
                      let l9 = *((arg0 + 36) as *const i32);
                      wit_bindgen::rt::dealloc(l8, (l9) as usize, 1);
                    },
                  }
                  let l10 = i32::from(*((arg0 + 40) as *const u8));
                  match l10 {
                    0 => (),
                    _ => {
                      let l11 = i32::from(*((arg0 + 44) as *const u8));
                      match l11 {
                        0 => (),
                        _ => {
                          let l12 = *((arg0 + 48) as *const i32);
                          let l13 = *((arg0 + 52) as *const i32);
                          wit_bindgen::rt::dealloc(l12, (l13) as usize, 1);
                        },
                      }
                      let l14 = *((arg0 + 56) as *const i32);
                      let l15 = *((arg0 + 60) as *const i32);
                      wit_bindgen::rt::dealloc(l14, (l15) as usize, 1);
                    },
                  }
                },
              }
            },
            _ => {
              let l16 = i32::from(*((arg0 + 4) as *const u8));
              match l16 {
                0 => (),
                1 => (),
                2 => {
                  let l17 = *((arg0 + 8) as *const i32);
                  let l18 = *((arg0 + 12) as *const i32);
                  wit_bindgen::rt::dealloc(l17, (l18) as usize, 1);
                },
                _ => {
                  let l19 = *((arg0 + 8) as *const i32);
                  let l20 = *((arg0 + 12) as *const i32);
                  wit_bindgen::rt::dealloc(l19, (l20) as usize, 1);
                },
              }
            },
          }
        }
      };
    };
    const _: () = {
      
      #[doc(hidden)]
      #[export_name = "process-markdown-to-html-with-frontmatter"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn __export_process_markdown_to_html_with_frontmatter(arg0: i32,arg1: i32,) -> i32 {
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        // Before executing any other code, use this function to run all static
        // constructors, if they have not yet been run. This is a hack required
        // to work around wasi-libc ctors calling import functions to initialize
        // the environment.
        //
        // This functionality will be removed once rust 1.69.0 is stable, at which
        // point wasi-libc will no longer have this behavior.
        //
        // See
        // https://github.com/bytecodealliance/preview2-prototyping/issues/99
        // for more details.
        #[cfg(target_arch="wasm32")]
        wit_bindgen::rt::run_ctors_once();
        
        let len0 = arg1 as usize;
        let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
        let result1 = <_GuestImpl as Guest>::process_markdown_to_html_with_frontmatter(wit_bindgen::rt::string_lift(bytes0));
        let ptr2 = _RET_AREA.0.as_mut_ptr() as i32;
        match result1 {
          Ok(e) => { {
            *((ptr2 + 0) as *mut u8) = (0i32) as u8;
            let HtmlOutput{ toc:toc3, content:content3, frontmatter:frontmatter3, } = e;
            match toc3 {
              Some(e) => {
                *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                let vec4 = (e.into_bytes()).into_boxed_slice();
                let ptr4 = vec4.as_ptr() as i32;
                let len4 = vec4.len() as i32;
                ::core::mem::forget(vec4);
                *((ptr2 + 12) as *mut i32) = len4;
                *((ptr2 + 8) as *mut i32) = ptr4;
              },
              None => {
                {
                  *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                }
              },
            };let vec5 = (content3.into_bytes()).into_boxed_slice();
            let ptr5 = vec5.as_ptr() as i32;
            let len5 = vec5.len() as i32;
            ::core::mem::forget(vec5);
            *((ptr2 + 20) as *mut i32) = len5;
            *((ptr2 + 16) as *mut i32) = ptr5;
            match frontmatter3 {
              Some(e) => {
                *((ptr2 + 24) as *mut u8) = (1i32) as u8;
                let OwnedFrontmatter{ title:title6, code_block:code_block6, } = e;
                match title6 {
                  Some(e) => {
                    *((ptr2 + 28) as *mut u8) = (1i32) as u8;
                    let vec7 = (e.into_bytes()).into_boxed_slice();
                    let ptr7 = vec7.as_ptr() as i32;
                    let len7 = vec7.len() as i32;
                    ::core::mem::forget(vec7);
                    *((ptr2 + 36) as *mut i32) = len7;
                    *((ptr2 + 32) as *mut i32) = ptr7;
                  },
                  None => {
                    {
                      *((ptr2 + 28) as *mut u8) = (0i32) as u8;
                    }
                  },
                };match code_block6 {
                  Some(e) => {
                    *((ptr2 + 40) as *mut u8) = (1i32) as u8;
                    let OwnedCodeBlock{ language:language8, source:source8, } = e;
                    match language8 {
                      Some(e) => {
                        *((ptr2 + 44) as *mut u8) = (1i32) as u8;
                        let vec9 = (e.into_bytes()).into_boxed_slice();
                        let ptr9 = vec9.as_ptr() as i32;
                        let len9 = vec9.len() as i32;
                        ::core::mem::forget(vec9);
                        *((ptr2 + 52) as *mut i32) = len9;
                        *((ptr2 + 48) as *mut i32) = ptr9;
                      },
                      None => {
                        {
                          *((ptr2 + 44) as *mut u8) = (0i32) as u8;
                        }
                      },
                    };let vec10 = (source8.into_bytes()).into_boxed_slice();
                    let ptr10 = vec10.as_ptr() as i32;
                    let len10 = vec10.len() as i32;
                    ::core::mem::forget(vec10);
                    *((ptr2 + 60) as *mut i32) = len10;
                    *((ptr2 + 56) as *mut i32) = ptr10;
                  },
                  None => {
                    {
                      *((ptr2 + 40) as *mut u8) = (0i32) as u8;
                    }
                  },
                };},
                None => {
                  {
                    *((ptr2 + 24) as *mut u8) = (0i32) as u8;
                  }
                },
              };} },
              Err(e) => { {
                *((ptr2 + 0) as *mut u8) = (1i32) as u8;
                match e {
                  HighlightError::Nolang=> {
                    {
                      *((ptr2 + 4) as *mut u8) = (0i32) as u8;
                    }
                  }
                  HighlightError::Nohighlighter=> {
                    {
                      *((ptr2 + 4) as *mut u8) = (1i32) as u8;
                    }
                  }
                  HighlightError::CouldNotBuildHighlighter(e) => {
                    *((ptr2 + 4) as *mut u8) = (2i32) as u8;
                    let vec11 = (e.into_bytes()).into_boxed_slice();
                    let ptr11 = vec11.as_ptr() as i32;
                    let len11 = vec11.len() as i32;
                    ::core::mem::forget(vec11);
                    *((ptr2 + 12) as *mut i32) = len11;
                    *((ptr2 + 8) as *mut i32) = ptr11;
                  },
                  HighlightError::StringGenerationError(e) => {
                    *((ptr2 + 4) as *mut u8) = (3i32) as u8;
                    let vec12 = (e.into_bytes()).into_boxed_slice();
                    let ptr12 = vec12.as_ptr() as i32;
                    let len12 = vec12.len() as i32;
                    ::core::mem::forget(vec12);
                    *((ptr2 + 12) as *mut i32) = len12;
                    *((ptr2 + 8) as *mut i32) = ptr12;
                  },
                }
              } },
            };ptr2
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_process-markdown-to-html-with-frontmatter"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_process_markdown_to_html_with_frontmatter(arg0: i32,) {
              let l0 = i32::from(*((arg0 + 0) as *const u8));
              match l0 {
                0 => {
                  let l1 = i32::from(*((arg0 + 4) as *const u8));
                  match l1 {
                    0 => (),
                    _ => {
                      let l2 = *((arg0 + 8) as *const i32);
                      let l3 = *((arg0 + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l2, (l3) as usize, 1);
                    },
                  }
                  let l4 = *((arg0 + 16) as *const i32);
                  let l5 = *((arg0 + 20) as *const i32);
                  wit_bindgen::rt::dealloc(l4, (l5) as usize, 1);
                  let l6 = i32::from(*((arg0 + 24) as *const u8));
                  match l6 {
                    0 => (),
                    _ => {
                      let l7 = i32::from(*((arg0 + 28) as *const u8));
                      match l7 {
                        0 => (),
                        _ => {
                          let l8 = *((arg0 + 32) as *const i32);
                          let l9 = *((arg0 + 36) as *const i32);
                          wit_bindgen::rt::dealloc(l8, (l9) as usize, 1);
                        },
                      }
                      let l10 = i32::from(*((arg0 + 40) as *const u8));
                      match l10 {
                        0 => (),
                        _ => {
                          let l11 = i32::from(*((arg0 + 44) as *const u8));
                          match l11 {
                            0 => (),
                            _ => {
                              let l12 = *((arg0 + 48) as *const i32);
                              let l13 = *((arg0 + 52) as *const i32);
                              wit_bindgen::rt::dealloc(l12, (l13) as usize, 1);
                            },
                          }
                          let l14 = *((arg0 + 56) as *const i32);
                          let l15 = *((arg0 + 60) as *const i32);
                          wit_bindgen::rt::dealloc(l14, (l15) as usize, 1);
                        },
                      }
                    },
                  }
                },
                _ => {
                  let l16 = i32::from(*((arg0 + 4) as *const u8));
                  match l16 {
                    0 => (),
                    1 => (),
                    2 => {
                      let l17 = *((arg0 + 8) as *const i32);
                      let l18 = *((arg0 + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l17, (l18) as usize, 1);
                    },
                    _ => {
                      let l19 = *((arg0 + 8) as *const i32);
                      let l20 = *((arg0 + 12) as *const i32);
                      wit_bindgen::rt::dealloc(l19, (l20) as usize, 1);
                    },
                  }
                },
              }
            }
          };
        };
        use super::Component as _GuestImpl;
        pub trait Guest {
          fn process_markdown_to_html(input: wit_bindgen::rt::string::String,) -> Result<HtmlOutput,HighlightError>;
          fn process_markdown_to_html_with_frontmatter(input: wit_bindgen::rt::string::String,) -> Result<HtmlOutput,HighlightError>;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 64]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 64]);
        
        #[cfg(target_arch = "wasm32")]
        #[link_section = "component-type:femark"]
        #[doc(hidden)]
        pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 499] = [0, 97, 115, 109, 13, 0, 1, 0, 0, 25, 22, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 45, 101, 110, 99, 111, 100, 105, 110, 103, 4, 0, 7, 247, 2, 1, 65, 2, 1, 65, 15, 1, 107, 115, 1, 114, 2, 8, 108, 97, 110, 103, 117, 97, 103, 101, 0, 6, 115, 111, 117, 114, 99, 101, 115, 3, 0, 16, 111, 119, 110, 101, 100, 45, 99, 111, 100, 101, 45, 98, 108, 111, 99, 107, 3, 0, 1, 1, 107, 2, 1, 114, 2, 5, 116, 105, 116, 108, 101, 0, 10, 99, 111, 100, 101, 45, 98, 108, 111, 99, 107, 3, 3, 0, 17, 111, 119, 110, 101, 100, 45, 102, 114, 111, 110, 116, 109, 97, 116, 116, 101, 114, 3, 0, 4, 1, 107, 5, 1, 114, 3, 3, 116, 111, 99, 0, 7, 99, 111, 110, 116, 101, 110, 116, 115, 11, 102, 114, 111, 110, 116, 109, 97, 116, 116, 101, 114, 6, 3, 0, 11, 104, 116, 109, 108, 45, 111, 117, 116, 112, 117, 116, 3, 0, 7, 1, 113, 4, 6, 110, 111, 108, 97, 110, 103, 0, 0, 13, 110, 111, 104, 105, 103, 104, 108, 105, 103, 104, 116, 101, 114, 0, 0, 27, 99, 111, 117, 108, 100, 45, 110, 111, 116, 45, 98, 117, 105, 108, 100, 45, 104, 105, 103, 104, 108, 105, 103, 104, 116, 101, 114, 1, 115, 0, 23, 115, 116, 114, 105, 110, 103, 45, 103, 101, 110, 101, 114, 97, 116, 105, 111, 110, 45, 101, 114, 114, 111, 114, 1, 115, 0, 3, 0, 15, 104, 105, 103, 104, 108, 105, 103, 104, 116, 45, 101, 114, 114, 111, 114, 3, 0, 9, 1, 106, 1, 8, 1, 10, 1, 64, 1, 5, 105, 110, 112, 117, 116, 115, 0, 11, 4, 0, 24, 112, 114, 111, 99, 101, 115, 115, 45, 109, 97, 114, 107, 100, 111, 119, 110, 45, 116, 111, 45, 104, 116, 109, 108, 1, 12, 4, 0, 41, 112, 114, 111, 99, 101, 115, 115, 45, 109, 97, 114, 107, 100, 111, 119, 110, 45, 116, 111, 45, 104, 116, 109, 108, 45, 119, 105, 116, 104, 45, 102, 114, 111, 110, 116, 109, 97, 116, 116, 101, 114, 1, 12, 4, 1, 20, 98, 101, 110, 119, 105, 115, 58, 102, 101, 109, 97, 114, 107, 47, 102, 101, 109, 97, 114, 107, 4, 0, 11, 12, 1, 0, 6, 102, 101, 109, 97, 114, 107, 3, 0, 0, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 50, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 56, 46, 48];
        
        #[inline(never)]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        pub fn __link_section() {}
        